const path = require('path')
const context = require('../helpers/context')
const request = require('../helpers/context').request
const Base = require('../../src/base/base')
const Container = require('../../src/container')
const Application = require('../../src/foundation/application')
const Config = require('../../src/config')
const Cookie = require('../../src/cookie')
const Messenger = require('../../src/cluster/messenger')
const Request = require('../../src/request')
const Response = require('../../src/response')
const Redirect = require('../../src/response/redirect')
const Session = require('../../src/session')
const View = require('../../src/view')

const _app = new Application(path.resolve(__dirname, '../'))
_app.initialize()

describe('base/base', () => {
  Container.get('config', [])
  const ctx = context({ url: '/store/shoes?page=2&color=blue' })
  const obj = new Base()
  obj.setCtx(ctx)
  it('base instance properties', () => {
    expect(obj.app).toBeInstanceOf(Application)
    expect(obj.config).toBeInstanceOf(Config)
    expect(obj.messenger).toBeInstanceOf(Messenger)
    expect(obj.request).toBeInstanceOf(Request)
    expect(obj.ctx).toBe(ctx)
    expect(obj.response).toBeInstanceOf(Response)
    expect(obj.redirect).toBeInstanceOf(Redirect)
    expect(obj.cookie).toBeInstanceOf(Cookie)
    expect(obj.cookies).toBeInstanceOf(Cookie)
    expect(obj.session).toBeInstanceOf(Session)
    expect(obj.view).toBeInstanceOf(View)
    expect(obj.query).toEqual({ page: '2', color: 'blue' })
    expect(obj.headers).toEqual(ctx.request.headers)
  })
})
